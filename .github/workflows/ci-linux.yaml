name: Linux CI

on: [push, pull_request]

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-20.04-gcc-10
            os: ubuntu-20.04
            compiler: gcc
            version: "10"
            configuration: Debug

          - name: ubuntu-20.04-gcc-10-coverage
            os: ubuntu-20.04
            compiler: gcc
            version: "10"
            configuration: Debug
            coverage: true
            cmake-args: -DENABLE_COVERAGE=ON

          - name: ubuntu-20.04-clang-tidy-13
            os: ubuntu-20.04
            compiler: clang
            version: "13"
            configuration: Debug
            clang-tidy: true
            cmake-args: -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

          - name: ubuntu-20.04-clang-13-sanitizers
            os: ubuntu-20.04
            compiler: clang
            version: "13"
            configuration: Debug
            cmake-args: -DADDRESS_SANITIZER=ON -DUNDEFINED_SANITIZER=ON

          - name: ubuntu-20.04-clang-14
            os: ubuntu-20.04
            compiler: clang
            version: "14"
            configuration: Debug

          - name: ubuntu-20.04-clang-14-sanitizers
            os: ubuntu-20.04
            compiler: clang
            version: "14"
            configuration: Debug
            cmake-args: -DADDRESS_SANITIZER=ON -DUNDEFINED_SANITIZER=ON

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install
        run: |
          pip install cmake==3.18.2.post1 ninja==1.10.0.post1 --upgrade

          sudo apt-get update

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            curl -fsSL https://apt.llvm.org/llvm.sh | sudo bash -s ${{ matrix.version }}
            sudo apt-get install -y clang-tidy-${{ matrix.version }} g++-multilib
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi

      - name: CMake
        run: |
          cmake --version
          ninja --version
          echo "CMake args: ${{ matrix.cmake-args }}"

          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ${{ matrix.cmake-args }}

      - name: Build
        if: ${{ ! matrix.clang-tidy }}
        run: |
          cmake --build build

      - name: Test
        if: ${{ ! matrix.clang-tidy }}
        env:
          ASAN_OPTIONS: "symbolize=1:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1"
          UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1"
        run: |
          (cd build && ctest -C ${{ matrix.configuration }} )

      - name: Coverage
        if: matrix.coverage
        run: |
          pip install gcovr
          (cd build && gcovr --gcov-executable gcov-10 -p --root .. --fail-under-line=94 --exclude 'CMakeFiles/' --exclude '_deps/' --exclude '(.+/)?test/' --exclude '.+/(application|nestest)/')

      - name: Clang-tidy
        if: matrix.clang-tidy
        run: |
          run-clang-tidy-${{ matrix.version }}.py -q -p build "application|core|disassembler|nes|nestest" -header-filter="(nes|core)/"
